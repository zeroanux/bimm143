---
title: "class07_machine_learning"
author: "Xueran Zou"
format: gfm
editor: visual
---

## Example of K-means clustering

The first step is to make up some data with a known structure, so we know what the answer should be.

```{r}
tmp <- c(rnorm(30, mean = -3), rnorm(30, mean = 3))
x <- cbind(x = tmp, y = rev(tmp))
plot(x)
```

Now we have some structured data in x. Let's see if K-means is able to identify the two groups.

```{r}
k <- kmeans(x, centers = 2, nstart = 20)
k
```

Let's explore k.

```{r}
k$size
k$centers
k$cluster
```

```{r}
plot(x, col = k$cluster)
```

Now we can add the clusters centers:

```{r}
plot(x, col = k$cluster)
points(k$centers, col = 'blue', pch = 15)
```

An example when we select the wrong number of clusters for k-means

```{r}
k_3 <- kmeans(x, centers = 3, nstart = 20)
plot(x, col = k_3$cluster)
```

## Example of Hierarchical Clustering

Let's use the same data as before, which we stored in "x". We will use the "hclust()' function.

```{r}
clustering <- hclust(dist(x))
clustering
```

```{r}
plot(clustering)
```

Let's add a horizontal line

```{r}
plot(clustering)
abline(h = 10, col = 'pink')
```

To get our results (i.e., membership vector) we need to "cut" the tree. The function for doing that is cutree()

```{r}
subgroups <- cutree(clustering, h = 20)
subgroups
```

Plot this:

```{r}
plot(x, col = subgroups)
```

You can also "cut" your tree with the number of clusters you want:

```{r}
cutree(clustering, k = 2)
```

# Principal Component Analysis (PCA)

Data import

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
head(x)
```

**Q1**. How many rows and columns are in your new data frame named `x`? What R functions could you use to answer this questions?

```{r}
dim(x)
```

```{r}
x <- read.csv(url, row.names = 1)
head(x)
```

**Q2.** Which approach to solving the 'row-names problem' mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

Using argument setting row.names=1 can be more robust. Because when running the first approach (x \<- x\[,-1\]) multiple times, it will constantly remove the first column of the data frame.

Now we can generate some basic visualizations

**Q3**: Changing what optional argument in the above **barplot()** function results in the following plot?

```{r}
barplot(as.matrix(x), col = rainbow(nrow(x)))
```

Let's refine out barplot.

```{r}
barplot(as.matrix(x), col = rainbow(nrow(x)), beside = TRUE)
```

**Q5**: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

Other visualization that can be useful:

```{r}
pairs(x, col = rainbow(nrow(x)), pch = 15)
```

**Q6**. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

N. Ireland takes less cheese, fish, fresh vegetables, fresh fruit and alcoholic drinks than the other countries, while it takes more fresh potatoes.

Let's apply PCA (Principal Component Analysis). For that, we need to use the command prcomp(). This function expects the transpose of our data.

```{r}
pca <- prcomp(t(x))
summary(pca)
```

Let's plot the PCA results:

```{r}
plot(pca)
```

We need to access the results of the PCA.

```{r}
attributes(pca)
```

We can explore the pca\$x dataframe:

```{r}
pca$x
```

Plot:

```{r}
plot(x = pca$x[,1], y = pca$x[,2])
```

**Q7**. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
```

**Q8.** Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
plot(x = pca$x[,1], y = pca$x[,2])
colors_countries <- c('orange', 'pink', 'blue', 'green')
text(x = pca$x[,1], y = pca$x[,2], colnames(x), col = colors_countries)
```

Calculate how much variation in the original data each PC accounts for.

```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v
```

```{r}
z <- summary(pca)
z$importance
```

```{r}
barplot(v, xlab="Principal Component", ylab="Percent Variation")
```

```{r}
# Lets focus on PC1 as it accounts for > 90% of variance 
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```

**Q9**: Generate a similar 'loadings plot' for PC2. What two food groups feature prominantely and what does PC2 maninly tell us about?

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
```

## PCA of RNA-seq data

First step as always is loading the data:

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

**Q10**: How many genes and samples are in this data set?

```{r}
dim(rna.data)
```

There are 100 genes and 10 samples in this data set.

Let's apply PCA:

```{r}
pca <- prcomp(t(rna.data), scale=TRUE)
summary(pca)
```

```{r}
plot(pca, main="Quick scree plot")
```

```{r}
# Variance captured per PC 
pca.var <- pca$sdev^2

# Percent variance is often more informative to look at 
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.var.per
```

```{r}
barplot(pca.var.per, main="Scree Plot", 
        names.arg = paste0("PC", 1:10),
        xlab="Principal Component", ylab="Percent Variation")
```

Let's plot the principal components 1 and 2.

```{r}
plot(pca$x[,1], pca$x[,2], xlab = 'PC1', ylab = 'PC2')
```

```{r}
colnames(rna.data)
cols_samples <- c(rep('blue', 5), rep('red', 5))
cols_samples

plot(pca$x[,1], pca$x[,2], xlab = 'PC1', ylab = 'PC2', col = cols_samples)
```

```{r}
barplot(pca$rotation[,1])
```

```{r}
sort(pca$rotation[,1])
```

## Using ggplot

```{r}
library(ggplot2)

df <- as.data.frame(pca$x)

ggplot(df) +
  aes(PC1, PC2) +
  geom_point()
```

Make it nicer.

```{r}
df$samples <- colnames(rna.data) 
df$condition <- substr(colnames(rna.data),1,2)

p <- ggplot(df) + 
        aes(PC1, PC2, label=samples, col=condition) + 
        geom_label(show.legend = FALSE)
p
```

```{r}
p + labs(title="PCA of RNASeq Data",
       subtitle = "PC1 clealy seperates wild-type from knock-out samples",
       x=paste0("PC1 (", pca.var.per[1], "%)"),
       y=paste0("PC2 (", pca.var.per[2], "%)"),
       caption="Class example data") +
     theme_bw()
```

## Gene loadings

Find the top 10 measurements (genes) that contribute most to PC1 in either direction.

```{r}
loading_scores <- pca$rotation[,1]

## Find the top 10 measurements (genes) that contribute
## most to PC1 in either direction (+ or -)
gene_scores <- abs(loading_scores) 
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)

## show the names of the top 10 genes
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes 
```
